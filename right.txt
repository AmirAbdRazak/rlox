In block: (Literal 0.0)
(If Statement (Binary < (Variable <ident a>) (Literal 3.0)) (Block Statement (Block Statement Print (Variable <ident a>))(Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0)))) )
===begin scope===
===START declare name_token <ident a> @ dist 1===
===FINISH declare name_token <ident a> @ dist 1===
===START define name_token <ident a> @ dist 1===
name <ident a> @ 1
===FINISH define name_token <ident a> @ dist 1===
=== START Resolving Local (Variable <ident a>) for name a===
=== FOUND a @ depth 0 for scope [a - true]===
=== FINISH Resolving Local (Variable <ident a>) for name a===
=== Resolving Local for expr (Variable <ident a>) @ depth 0
=== Now Locals is [(Variable <ident a>) - 0]
In block: (Block Statement Print (Variable <ident a>))
(Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0)))
===begin scope===
In block: Print (Variable <ident a>)
===begin scope===
=== START Resolving Local (Variable <ident a>) for name a===
=== FOUND a @ depth 2 for scope [a - true]===
=== FINISH Resolving Local (Variable <ident a>) for name a===
=== Resolving Local for expr (Variable <ident a>) @ depth 2
=== Now Locals is [(Variable <ident a>) - 0][(Variable <ident a>) - 2]
===end scope===
=== START Resolving Local (Variable <ident a>) for name a===
=== FOUND a @ depth 1 for scope [a - true]===
=== FINISH Resolving Local (Variable <ident a>) for name a===
=== Resolving Local for expr (Variable <ident a>) @ depth 1
=== Now Locals is [(Variable <ident a>) - 1][(Variable <ident a>) - 0][(Variable <ident a>) - 2]
=== START Resolving Local (Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0))) for name a===
=== FOUND a @ depth 1 for scope [a - true]===
=== FINISH Resolving Local (Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0))) for name a===
=== Resolving Local for expr (Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0))) @ depth 1
=== Now Locals is [(Variable <ident a>) - 1][(Variable <ident a>) - 0][(Variable <ident a>) - 2][(Assignment <ident a> = (Binary + (Variable <ident a>) (Literal 1.0))) - 1]
===end scope===
===end scope===
Working env [a - 0] @ distance 0
Global env [clock - Native Clock Function] @ distance 0
token <ident a> @ distance 0
Working env  @ distance 2
Global env [clock - Native Clock Function] @ distance 2
token <ident a> @ distance 2
Parent 1  @ distance 0
Parent 1  @ distance 1
Search ENV [a - 0] @ distance 2
0
Working env  @ distance 1
Global env [clock - Native Clock Function] @ distance 1
token <ident a> @ distance 1
Parent 1 [a - 0] @ distance 0
Search ENV [a - 0] @ distance 1
Parent 1 [a - 0] @ distance 0
Search ENV [a - 0] @ distance 1
assigning name_token <ident a> @ distance 1
Working env [a - 1] @ distance 0
Global env [clock - Native Clock Function] @ distance 0
token <ident a> @ distance 0
Working env  @ distance 2
Global env [clock - Native Clock Function] @ distance 2
token <ident a> @ distance 2
Parent 1  @ distance 0
Parent 1  @ distance 1
Search ENV [a - 1] @ distance 2
1
Working env  @ distance 1
Global env [clock - Native Clock Function] @ distance 1
token <ident a> @ distance 1
Parent 1 [a - 1] @ distance 0
Search ENV [a - 1] @ distance 1
Parent 1 [a - 1] @ distance 0
Search ENV [a - 1] @ distance 1
assigning name_token <ident a> @ distance 1
Working env [a - 2] @ distance 0
Global env [clock - Native Clock Function] @ distance 0
token <ident a> @ distance 0
Working env  @ distance 2
Global env [clock - Native Clock Function] @ distance 2
token <ident a> @ distance 2
Parent 1  @ distance 0
Parent 1  @ distance 1
Search ENV [a - 2] @ distance 2
2
Working env  @ distance 1
Global env [clock - Native Clock Function] @ distance 1
token <ident a> @ distance 1
Parent 1 [a - 2] @ distance 0
Search ENV [a - 2] @ distance 1
Parent 1 [a - 2] @ distance 0
Search ENV [a - 2] @ distance 1
assigning name_token <ident a> @ distance 1
Working env [a - 3] @ distance 0
Global env [clock - Native Clock Function] @ distance 0
token <ident a> @ distance 0
